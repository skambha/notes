Case 1:   spark.range(0, 12, 1, 1) returns null for agg. 

scala> val decimalStr = "1" + "0" * 19
decimalStr: String = 10000000000000000000

scala> val df = spark.range(0, 12, 1, 1)
df: org.apache.spark.sql.Dataset[Long] = [id: bigint]

scala> val df2 = df.select(expr(s"cast('$decimalStr' as decimal (38, 18)) as d"))
df2: org.apache.spark.sql.DataFrame = [d: decimal(38,18)]

scala> df2.rdd.getNumPartitions
   final def getNumPartitions: Int

scala> df2.rdd.getNumPartitions
res0: Int = 1

scala> df2.agg(sum($"d")).show

+------+
|sum(d)|
+------+
|  null|
+------+

---------

Summary: 
- There is only one partition and 1 wholestagecodegen subtree.  There is no intermediate writing out via UnsafeRowWriter.  Hence all the values are added up which is a overflow value and then the check overflow code kicks in that will turn it to a null.  The null will be written out. 

Details below:
---------------

Observations:
Partition is 1. 
Found 1 WholeStageCodegen subtrees.
So the updateExpression codegen code will do the add ie +, for all the 12 decimal values and then it doesnt write it out to UnsafeRow via UnsafeRowWriter
This will amount to 120000000000000000000.000000000000000000 which is overflowed value. 

This then goes to the CheckOverflow code which checks the decimal value with precision and it overflows and this call will evaluate to null. 
/* 239 */         agg_value_1 = agg_mutableStateArray_0[0].toPrecision(
/* 240 */           38, 18, Decimal.ROUND_HALF_UP(), true);

The null is then written out via UnsafeRowWriter.write call below.

/* 250 */       if (agg_isNull_1) {
/* 251 */         range_mutableStateArray_0[3].write(0, (Decimal) null, 38, 18);


This explains why this scenario works fine. 


Plan:
scala> df2.agg(sum($"d")).explain(true)
== Parsed Logical Plan ==
'Aggregate [sum('d) AS sum(d)#25]
+- Project [cast(10000000000000000000 as decimal(38,18)) AS d#2]
   +- Range (0, 12, step=1, splits=Some(1))

== Analyzed Logical Plan ==
sum(d): decimal(38,18)
Aggregate [sum(d#2) AS sum(d)#25]
+- Project [cast(10000000000000000000 as decimal(38,18)) AS d#2]
   +- Range (0, 12, step=1, splits=Some(1))

== Optimized Logical Plan ==
Aggregate [sum(10000000000000000000.000000000000000000) AS sum(d)#25]
+- Project
   +- Range (0, 12, step=1, splits=Some(1))

== Physical Plan ==
*(1) HashAggregate(keys=[], functions=[sum(10000000000000000000.000000000000000000)], output=[sum(d)#25])
+- *(1) HashAggregate(keys=[], functions=[partial_sum(10000000000000000000.000000000000000000)], output=[sum#28])
   +- *(1) Project
      +- *(1) Range (0, 12, step=1, splits=1)

WholeStageCodegen:

Found 1 WholeStageCodegen subtrees.
== Subtree 1 / 1 (maxMethodCodeSize:280; maxConstantPoolSize:234(0.36% used); numInnerClasses:0) ==
*(1) HashAggregate(keys=[], functions=[sum(10000000000000000000.000000000000000000)], output=[sum(d)#19])
+- *(1) HashAggregate(keys=[], functions=[partial_sum(10000000000000000000.000000000000000000)], output=[sum#22])
   +- *(1) Project
      +- *(1) Range (0, 12, step=1, splits=1)

Generated code:
/* 001 */ public Object generate(Object[] references) {
/* 002 */   return new GeneratedIteratorForCodegenStage1(references);
/* 003 */ }
/* 004 */
/* 005 */ // codegenStageId=1
/* 006 */ final class GeneratedIteratorForCodegenStage1 extends org.apache.spark.sql.execution.BufferedRowIterator {
/* 007 */   private Object[] references;
/* 008 */   private scala.collection.Iterator[] inputs;
/* 009 */   private boolean agg_initAgg_0;
/* 010 */   private boolean agg_bufIsNull_0;
/* 011 */   private boolean agg_initAgg_1;
/* 012 */   private boolean agg_bufIsNull_1;
/* 013 */   private boolean range_initRange_0;
/* 014 */   private long range_nextIndex_0;
/* 015 */   private TaskContext range_taskContext_0;
/* 016 */   private InputMetrics range_inputMetrics_0;
/* 017 */   private long range_batchEnd_0;
/* 018 */   private long range_numElementsTodo_0;
/* 019 */   private boolean agg_agg_isNull_6_0;
/* 020 */   private boolean agg_agg_isNull_12_0;
/* 021 */   private boolean agg_agg_isNull_14_0;
/* 022 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter[] range_mutableStateArray_0 = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter[4];
/* 023 */   private Decimal[] agg_mutableStateArray_0 = new Decimal[2];
/* 024 */
/* 025 */   public GeneratedIteratorForCodegenStage1(Object[] references) {
/* 026 */     this.references = references;
/* 027 */   }
/* 028 */
/* 029 */   public void init(int index, scala.collection.Iterator[] inputs) {
/* 030 */     partitionIndex = index;
/* 031 */     this.inputs = inputs;
/* 032 */
/* 033 */     range_taskContext_0 = TaskContext.get();
/* 034 */     range_inputMetrics_0 = range_taskContext_0.taskMetrics().inputMetrics();
/* 035 */     range_mutableStateArray_0[0] = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(1, 0);
/* 036 */     range_mutableStateArray_0[1] = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(1, 32);
/* 037 */     range_mutableStateArray_0[2] = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(1, 32);
/* 038 */     range_mutableStateArray_0[3] = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(1, 32);
/* 039 */
/* 040 */   }
/* 041 */
/* 042 */   private void agg_doAggregateWithoutKey_0() throws java.io.IOException {
/* 043 */     // initialize aggregation buffer
/* 044 */     agg_bufIsNull_0 = true;
/* 045 */     agg_mutableStateArray_0[0] = ((Decimal)null);
/* 046 */
/* 047 */     while (!agg_initAgg_1) {
/* 048 */       agg_initAgg_1 = true;
/* 049 */       long agg_beforeAgg_0 = System.nanoTime();
/* 050 */       agg_doAggregateWithoutKey_1();
/* 051 */       ((org.apache.spark.sql.execution.metric.SQLMetric) references[4] /* aggTime */).add((System.nanoTime() - agg_beforeAgg_0) / 1000000);
/* 052 */
/* 053 */       // output the result
/* 054 */
/* 055 */       ((org.apache.spark.sql.execution.metric.SQLMetric) references[3] /* numOutputRows */).add(1);
/* 056 */       agg_doConsume_1(agg_mutableStateArray_0[1], agg_bufIsNull_1);
/* 057 */     }
/* 058 */
/* 059 */   }
/* 060 */
/* 061 */   private void agg_doConsume_1(Decimal agg_expr_0_0, boolean agg_exprIsNull_0_0) throws java.io.IOException {
/* 062 */     // do aggregate
/* 063 */     // common sub-expressions
/* 064 */
/* 065 */     // evaluate aggregate functions and update aggregation buffers
/* 066 */
/* 067 */     // do aggregate for sum
/* 068 */     // evaluate aggregate function
/* 069 */     agg_agg_isNull_12_0 = true;
/* 070 */     Decimal agg_value_12 = null;
/* 071 */     do {
/* 072 */       boolean agg_isNull_13 = true;
/* 073 */       Decimal agg_value_13 = null;
/* 074 */       agg_agg_isNull_14_0 = true;
/* 075 */       Decimal agg_value_14 = null;
/* 076 */       do {
/* 077 */         if (!agg_bufIsNull_0) {
/* 078 */           agg_agg_isNull_14_0 = false;
/* 079 */           agg_value_14 = agg_mutableStateArray_0[0];
/* 080 */           continue;
/* 081 */         }
/* 082 */
/* 083 */         if (!false) {
/* 084 */           agg_agg_isNull_14_0 = false;
/* 085 */           agg_value_14 = ((Decimal) references[5] /* literal */);
/* 086 */           continue;
/* 087 */         }
/* 088 */
/* 089 */       } while (false);
/* 090 */
/* 091 */       if (!agg_exprIsNull_0_0) {
/* 092 */         agg_isNull_13 = false; // resultCode could change nullability.
/* 093 */         agg_value_13 = agg_value_14.$plus(agg_expr_0_0);
/* 094 */
/* 095 */       }
/* 096 */       if (!agg_isNull_13) {
/* 097 */         agg_agg_isNull_12_0 = false;
/* 098 */         agg_value_12 = agg_value_13;
/* 099 */         continue;
/* 100 */       }
/* 101 */
/* 102 */       if (!agg_bufIsNull_0) {
/* 103 */         agg_agg_isNull_12_0 = false;
/* 104 */         agg_value_12 = agg_mutableStateArray_0[0];
/* 105 */         continue;
/* 106 */       }
/* 107 */
/* 108 */     } while (false);
/* 109 */     // update aggregation buffers
/* 110 */     agg_bufIsNull_0 = agg_agg_isNull_12_0;
/* 111 */     agg_mutableStateArray_0[0] = agg_value_12;
/* 112 */
/* 113 */   }
/* 114 */
/* 115 */   private void initRange(int idx) {
/* 116 */     java.math.BigInteger index = java.math.BigInteger.valueOf(idx);
/* 117 */     java.math.BigInteger numSlice = java.math.BigInteger.valueOf(1L);
/* 118 */     java.math.BigInteger numElement = java.math.BigInteger.valueOf(12L);
/* 119 */     java.math.BigInteger step = java.math.BigInteger.valueOf(1L);
/* 120 */     java.math.BigInteger start = java.math.BigInteger.valueOf(0L);
/* 121 */     long partitionEnd;
/* 122 */
/* 123 */     java.math.BigInteger st = index.multiply(numElement).divide(numSlice).multiply(step).add(start);
/* 124 */     if (st.compareTo(java.math.BigInteger.valueOf(Long.MAX_VALUE)) > 0) {
/* 125 */       range_nextIndex_0 = Long.MAX_VALUE;
/* 126 */     } else if (st.compareTo(java.math.BigInteger.valueOf(Long.MIN_VALUE)) < 0) {
/* 127 */       range_nextIndex_0 = Long.MIN_VALUE;
/* 128 */     } else {
/* 129 */       range_nextIndex_0 = st.longValue();
/* 130 */     }
/* 131 */     range_batchEnd_0 = range_nextIndex_0;
/* 132 */
/* 133 */     java.math.BigInteger end = index.add(java.math.BigInteger.ONE).multiply(numElement).divide(numSlice)
/* 134 */     .multiply(step).add(start);
/* 135 */     if (end.compareTo(java.math.BigInteger.valueOf(Long.MAX_VALUE)) > 0) {
/* 136 */       partitionEnd = Long.MAX_VALUE;
/* 137 */     } else if (end.compareTo(java.math.BigInteger.valueOf(Long.MIN_VALUE)) < 0) {
/* 138 */       partitionEnd = Long.MIN_VALUE;
/* 139 */     } else {
/* 140 */       partitionEnd = end.longValue();
/* 141 */     }
/* 142 */
/* 143 */     java.math.BigInteger startToEnd = java.math.BigInteger.valueOf(partitionEnd).subtract(
/* 144 */       java.math.BigInteger.valueOf(range_nextIndex_0));
/* 145 */     range_numElementsTodo_0  = startToEnd.divide(step).longValue();
/* 146 */     if (range_numElementsTodo_0 < 0) {
/* 147 */       range_numElementsTodo_0 = 0;
/* 148 */     } else if (startToEnd.remainder(step).compareTo(java.math.BigInteger.valueOf(0L)) != 0) {
/* 149 */       range_numElementsTodo_0++;
/* 150 */     }
/* 151 */   }
/* 152 */
/* 153 */   private void agg_doConsume_0() throws java.io.IOException {
/* 154 */     // do aggregate
/* 155 */     // common sub-expressions
/* 156 */
/* 157 */     // evaluate aggregate functions and update aggregation buffers
/* 158 */
/* 159 */     // do aggregate for sum
/* 160 */     // evaluate aggregate function
/* 161 */     agg_agg_isNull_6_0 = true;
/* 162 */     Decimal agg_value_6 = null;
/* 163 */     do {
/* 164 */       if (!agg_bufIsNull_1) {
/* 165 */         agg_agg_isNull_6_0 = false;
/* 166 */         agg_value_6 = agg_mutableStateArray_0[1];
/* 167 */         continue;
/* 168 */       }
/* 169 */
/* 170 */       if (!false) {
/* 171 */         agg_agg_isNull_6_0 = false;
/* 172 */         agg_value_6 = ((Decimal) references[1] /* literal */);
/* 173 */         continue;
/* 174 */       }
/* 175 */
/* 176 */     } while (false);
/* 177 */
/* 178 */     Decimal agg_value_5 = null;
/* 179 */     agg_value_5 = agg_value_6.$plus(((Decimal) references[2] /* literal */));
/* 180 */     // update aggregation buffers
/* 181 */     agg_bufIsNull_1 = false;
/* 182 */     agg_mutableStateArray_0[1] = agg_value_5;
/* 183 */
/* 184 */   }
/* 185 */
/* 186 */   private void agg_doAggregateWithoutKey_1() throws java.io.IOException {
/* 187 */     // initialize aggregation buffer
/* 188 */     agg_bufIsNull_1 = true;
/* 189 */     agg_mutableStateArray_0[1] = ((Decimal)null);
/* 190 */
/* 191 */     // initialize Range
/* 192 */     if (!range_initRange_0) {
/* 193 */       range_initRange_0 = true;
/* 194 */       initRange(partitionIndex);
/* 195 */     }
/* 196 */
/* 197 */     while (true) {
/* 198 */       if (range_nextIndex_0 == range_batchEnd_0) {
/* 199 */         long range_nextBatchTodo_0;
/* 200 */         if (range_numElementsTodo_0 > 1000L) {
/* 201 */           range_nextBatchTodo_0 = 1000L;
/* 202 */           range_numElementsTodo_0 -= 1000L;
/* 203 */         } else {
/* 204 */           range_nextBatchTodo_0 = range_numElementsTodo_0;
/* 205 */           range_numElementsTodo_0 = 0;
/* 206 */           if (range_nextBatchTodo_0 == 0) break;
/* 207 */         }
/* 208 */         range_batchEnd_0 += range_nextBatchTodo_0 * 1L;
/* 209 */       }
/* 210 */
/* 211 */       int range_localEnd_0 = (int)((range_batchEnd_0 - range_nextIndex_0) / 1L);
/* 212 */       for (int range_localIdx_0 = 0; range_localIdx_0 < range_localEnd_0; range_localIdx_0++) {
/* 213 */         long range_value_0 = ((long)range_localIdx_0 * 1L) + range_nextIndex_0;
/* 214 */
/* 215 */         agg_doConsume_0();
/* 216 */
/* 217 */         // shouldStop check is eliminated
/* 218 */       }
/* 219 */       range_nextIndex_0 = range_batchEnd_0;
/* 220 */       ((org.apache.spark.sql.execution.metric.SQLMetric) references[0] /* numOutputRows */).add(range_localEnd_0);
/* 221 */       range_inputMetrics_0.incRecordsRead(range_localEnd_0);
/* 222 */       range_taskContext_0.killTaskIfInterrupted();
/* 223 */     }
/* 224 */
/* 225 */   }
/* 226 */
/* 227 */   protected void processNext() throws java.io.IOException {
/* 228 */     while (!agg_initAgg_0) {
/* 229 */       agg_initAgg_0 = true;
/* 230 */       long agg_beforeAgg_1 = System.nanoTime();
/* 231 */       agg_doAggregateWithoutKey_0();
/* 232 */       ((org.apache.spark.sql.execution.metric.SQLMetric) references[7] /* aggTime */).add((System.nanoTime() - agg_beforeAgg_1) / 1000000);
/* 233 */
/* 234 */       // output the result
/* 235 */       boolean agg_isNull_1 = agg_bufIsNull_0;
/* 236 */       Decimal agg_value_1 = null;
/* 237 */
/* 238 */       if (!agg_bufIsNull_0) {
/* 239 */         agg_value_1 = agg_mutableStateArray_0[0].toPrecision(
/* 240 */           38, 18, Decimal.ROUND_HALF_UP(), true);
/* 241 */         agg_isNull_1 = agg_value_1 == null;
/* 242 */
/* 243 */       }
/* 244 */
/* 245 */       ((org.apache.spark.sql.execution.metric.SQLMetric) references[6] /* numOutputRows */).add(1);
/* 246 */       range_mutableStateArray_0[3].reset();
/* 247 */
/* 248 */       range_mutableStateArray_0[3].zeroOutNullBytes();
/* 249 */
/* 250 */       if (agg_isNull_1) {
/* 251 */         range_mutableStateArray_0[3].write(0, (Decimal) null, 38, 18);
/* 252 */       } else {
/* 253 */         range_mutableStateArray_0[3].write(0, agg_value_1, 38, 18);
/* 254 */       }
/* 255 */       append((range_mutableStateArray_0[3].getRow()));
/* 256 */     }
/* 257 */   }
/* 258 */
/* 259 */ }
